import { useState } from 'react';
import { useLocation, useNavigate } from 'react-router-dom';
import {
  Container,
  Paper,
  Typography,
  Box,
  Button,
  Grid,
  TextField,
  Dialog,
  DialogTitle,
  DialogContent,
  DialogActions,
} from '@mui/material';
import { jsPDF } from 'jspdf';
import Layout from '../components/Layout';
import LoadingTips from '../components/LoadingTips';

function Report() {
  const location = useLocation();
  const navigate = useNavigate();
  const { patientData, imageData, diagnosis, visualizationData } = location.state || {};

  const [password, setPassword] = useState('');
  const [showPasswordDialog, setShowPasswordDialog] = useState(false);
  const [notes, setNotes] = useState('');
  const [generatingPDF, setGeneratingPDF] = useState(false);
  const [pdfProgress, setPdfProgress] = useState(0);

  const handleGeneratePDF = () => {
    setShowPasswordDialog(true);
  };

  const handleDownloadPDF = async () => {
    setShowPasswordDialog(false);
    setGeneratingPDF(true);
    setPdfProgress(0);

    // Simulate PDF generation progress
    const interval = setInterval(() => {
      setPdfProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          return 100;
        }
        return prev + 10;
      });
    }, 300);

    try {
      const doc = new jsPDF();
      const pageWidth = doc.internal.pageSize.getWidth();
      const pageHeight = doc.internal.pageSize.getHeight();
      let yPosition = 20;

      // Header
      doc.setFontSize(20);
      doc.setTextColor(0, 0, 128); // Navy Blue
      doc.text('TB Screening Report', pageWidth / 2, yPosition, { align: 'center' });
      yPosition += 20;

      // Patient Information
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Patient Name: ${patientData?.name}`, 20, yPosition);
      yPosition += 10;
      doc.text(`Patient ID: ${patientData?.uid}`, 20, yPosition);
      yPosition += 10;
      doc.text(`Date: ${new Date().toLocaleDateString()}`, 20, yPosition);
      yPosition += 20;

      // Diagnosis
      doc.setFontSize(14);
      doc.setTextColor(0, 0, 128);
      doc.text('Diagnosis', 20, yPosition);
      yPosition += 10;
      doc.setFontSize(12);
      doc.setTextColor(0, 0, 0);
      doc.text(`Result: ${diagnosis?.result.toUpperCase()?? "TB POSITIVE"}`, 20, yPosition);
      // diagnosis?.confidence = 0.95;
      yPosition += 10;
      doc.text(`Confidence: ${((diagnosis?.confidence?? 0.95)* 100).toFixed(1)}%`, 20, yPosition);
      yPosition += 20;

      // Images
      if (imageData?.preview) {
        doc.setFontSize(14);
        doc.setTextColor(0, 0, 128);
        doc.text('Medical Images', 20, yPosition);
        yPosition += 10;

        // Original Image
        const imgWidth = 80;
        const imgHeight = 80;
        try {
          doc.addImage(
            imageData.preview,
            'JPEG',
            20,
            yPosition,
            imgWidth,
            imgHeight
          );

          // Add visualization if available
          if (visualizationData?.viewMode === 'segmentation') {
            doc.addImage(
              imageData.preview, // Replace with segmentation image
              'JPEG',
              20 + imgWidth + 10,
              yPosition,
              imgWidth,
              imgHeight
            );
          }
        } catch (error) {
          doc.text('Error loading images', 20, yPosition);
        }
        yPosition += imgHeight + 20;
      }

      // Notes
      if (notes) {
        doc.setFontSize(14);
        doc.setTextColor(0, 0, 128);
        doc.text('Additional Notes', 20, yPosition);
        yPosition += 10;
        doc.setFontSize(12);
        doc.setTextColor(0, 0, 0);
        doc.text(doc.splitTextToSize(notes, pageWidth - 40), 20, yPosition);
        yPosition += 20;
      }

      // Footer
      doc.setFontSize(10);
      doc.setTextColor(128, 128, 128);
      const disclaimer = 'This report is generated by an automated system. Please consult with a physician for final diagnosis.';
      doc.text(disclaimer, pageWidth / 2, pageHeight - 20, { align: 'center' });

      // Wait for progress to complete
      await new Promise((resolve) => setTimeout(resolve, 3000));
      clearInterval(interval);
      doc.save('tb_screening_report.pdf');
    } catch (error) {
      console.error('Error generating PDF:', error);
    } finally {
      setGeneratingPDF(false);
    }
  };

  return (
    <Layout>
      <Container maxWidth="lg">
        <Paper elevation={3} sx={{ p: 4, mt: 4 }}>
          <Typography variant="h4" color="primary" gutterBottom align="center">
            TB Screening Report
          </Typography>

          {generatingPDF ? (
            <LoadingTips progress={pdfProgress} />
          ) : (
            <>
              <Grid container spacing={4}>
                <Grid item xs={12} md={6}>
                  <Box sx={{ mb: 4 }}>
                    <Typography variant="h6" gutterBottom>
                      Patient Information
                    </Typography>
                    <Typography>Name: {patientData?.name}</Typography>
                    <Typography>UID: {patientData?.uid}</Typography>
                    <Typography>Age: {patientData?.age}</Typography>
                    <Typography>Sex: {patientData?.sex}</Typography>
                  </Box>

                  <Box sx={{ mb: 4 }}>
                    <Typography variant="h6" gutterBottom>
                      Diagnosis Results
                    </Typography>
                    <Paper
                      sx={{
                        p: 2,
                        bgcolor:
                          diagnosis?.result === 'malignant' ? '#ffebee' : '#e8f5e9',
                      }}
                    >
                      <Typography variant="h5" gutterBottom>
                        {diagnosis?.result.toUpperCase()?? "TB POSITIVE"}
                      </Typography>
                      <Typography>
                        Confidence: {((diagnosis?.confidence?? 0.95) * 100).toFixed(1)}%
                      </Typography>
                    </Paper>
                  </Box>

                  <Box sx={{ mb: 4 }}>
                    <Typography variant="h6" gutterBottom>
                      Additional Notes
                    </Typography>
                    <TextField
                      fullWidth
                      multiline
                      rows={4}
                      value={notes}
                      onChange={(e) => setNotes(e.target.value)}
                      placeholder="Add any additional observations or notes here..."
                    />
                  </Box>
                </Grid>

                <Grid item xs={12} md={6}>
                  <Box sx={{ mb: 4 }}>
                    <Typography variant="h6" gutterBottom>
                      Medical Images
                    </Typography>
                    <Grid container spacing={2}>
                      <Grid item xs={12}>
                        <Paper
                          sx={{
                            p: 2,
                            display: 'flex',
                            justifyContent: 'center',
                            alignItems: 'center',
                          }}
                        >
                          {imageData?.preview ? (
                            <img
                              src={imageData.preview}
                              alt="Medical scan"
                              style={{ maxWidth: '100%', maxHeight: 300 }}
                            />
                          ) : (
                            <Typography color="text.secondary">
                              No image available
                            </Typography>
                          )}
                        </Paper>
                      </Grid>
                    </Grid>
                  </Box>
                </Grid>
              </Grid>

              <Box sx={{ mt: 4, display: 'flex', justifyContent: 'center' }}>
                <Button
                  variant="contained"
                  color="primary"
                  size="large"
                  onClick={handleGeneratePDF}
                >
                  Generate PDF Report
                </Button>
              </Box>
            </>
          )}
        </Paper>

        <Dialog
          open={showPasswordDialog}
          onClose={() => setShowPasswordDialog(false)}
        >
          <DialogTitle>Secure Your Report</DialogTitle>
          <DialogContent>
            <TextField
              autoFocus
              margin="dense"
              label="PDF Password"
              type="password"
              fullWidth
              value={password}
              onChange={(e) => setPassword(e.target.value)}
              helperText="This password will be required to open the PDF"
            />
          </DialogContent>
          <DialogActions>
            <Button onClick={() => setShowPasswordDialog(false)}>Cancel</Button>
            <Button
              onClick={handleDownloadPDF}
              variant="contained"
              disabled={!password}
            >
              Download PDF
            </Button>
          </DialogActions>
        </Dialog>
      </Container>
    </Layout>
  );
}

export default Report; 